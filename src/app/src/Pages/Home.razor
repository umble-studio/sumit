@page "/"
@using System.Reflection
@using System.Runtime.Loader
@using Sumit.Extension
@using Sumit.Extension.Extensions

<h1 class="text-white text-5xl">Hello, world!</h1>

@if (_componentType is not null)
{
    <DynamicComponent Type="_componentType"/>
}

@code {

    private Type? _componentType;

    [Inject] public IJSRuntime Js { get; set; } = null!;
    [Inject] public HttpClient HttpClient { get; set; } = null!;

    private async Task<MemoryStream?> GetMemoryStreamFromFile(string path)
    {
        var buffer = await Js.FsReadFile(path);
        return new MemoryStream(buffer);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        const string LocalPluginPath = "sumit-app/src/plugins/bin/Debug/net8.0/Finder.dll";
        
        try
        {
            var stream = await GetMemoryStreamFromFile(LocalPluginPath);
            if (stream is null) return;
            
            var asm = AssemblyLoadContext.Default.LoadFromStream(stream);

            var mainType = asm.GetTypes().FirstOrDefault(x => x.Name is "Main");
            if (mainType is null) return;

            if (Activator.CreateInstance(mainType) is Extension extension)
            {
                Console.WriteLine("Plugin loaded: " + extension.Name);

                if (!extension.GetComponentEntry(out var attr)) return;
                _componentType = attr.Type;

                // Only load the extension if a component entry is provided
                extension.OnLoad();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Err: " + ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Home init: " + HttpClient.BaseAddress.AbsoluteUri);

        @* try
        {
            var msg = new HttpClient().GetStreamAsync(HttpClient.BaseAddress.AbsoluteUri + "Finder.dll");
            //var msg = httpClient.GetStreamAsync("file:///C:/Library/DynamicLibrary.dll"); 
            var stream = msg.Result;
            var assembly = AssemblyLoadContext.Default.LoadFromStream(stream);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        } *@
    }

}